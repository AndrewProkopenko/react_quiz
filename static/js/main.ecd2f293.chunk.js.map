{"version":3,"sources":["context/QuizContext.js","context/QuizProvider.js","components/404/Error404.js","components/Main.js","components/theory/OrfBase.js","components/theory/PunkBase.js","components/theory/Theory.js","components/test/QuizCard.js","components/test/QuizResult.js","components/test/ConsumerContainer.js","components/test/QuizContainer.js","App.js","index.js"],"names":["QuizContext","React","createContext","QuizProvider","state","quiz_orf","id","text","options","correctAnswer","isAnswered","userAnswer","quiz_punk","activeQuection","answeredQuections","isShowResult","Provider","value","this","showResult","answers","setState","props","children","Component","Error404","navigate","useNavigate","Card","className","Body","Button","size","variant","onClick","Main","Container","Row","Col","to","OrfBase","PunkBase","Theory","type","useParams","as","NavLink","QuizCard","quections","answerCounter","addAnswer","bind","skipAnswer","renderProgress","isButtonDisabled","length","skiped","map","item","push","newActiveNumber","activeId","newAnswerCounter","setTimeout","newAnsweredArray","slice","answer","console","log","quection","key","option","index","changeAnswer","quectionsLength","quectionText","Header","renderOptions","disabled","QuizResult","renderAnswers","counter","result","yourResult","computedAnswers","ConsumerContainer","useContext","QuizContainer","md","App","path","element","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.ecd2f293.chunk.js","sourcesContent":["import React from 'react'\n\nconst QuizContext = React.createContext();\n\nexport default QuizContext; ","import React, { Component } from 'react'\n\nimport QuizContext from './QuizContext'\n\nclass QuizProvider extends Component { \n\n    state = {  \n        quiz_orf: [ \n            {\n                id: 0,\n                text: 'Оргфография вопрос 1 ?', \n                options: ['1', '2','3', '4'], \n                correctAnswer: 1 ,\n                isAnswered: false, \n                userAnswer: null\n            },  \n            {\n                id: 1,\n                text: 'Оргфография вопрос 2 ?', \n                options: ['1', '2','3', '4'], \n                correctAnswer: 1 ,\n                isAnswered: false, \n                userAnswer: null\n            },  \n        ],\n        quiz_punk: [ \n            {\n                id: 0,\n                text: 'Пунктуация вопрос 1 ?', \n                options: ['1', '2','3', '4'], \n                correctAnswer: 1 ,\n                isAnswered: false, \n                userAnswer: null\n            },  \n            {\n                id: 2,\n                text: 'Пунктуация вопрос 2 ?', \n                options: ['1', '2','3', '4'], \n                correctAnswer: 1 ,\n                isAnswered: false, \n                userAnswer: null\n            },  \n        ],\n        activeQuection: 0, \n        answeredQuections: [], \n        isShowResult: false \n\n    }\n\n    render() { \n        return (\n            <QuizContext.Provider value={ { \n                quiz_orf: this.state.quiz_orf,\n                quiz_punk: this.state.quiz_punk,\n                activeQuection: this.state.activeQuection, \n                answeredQuections:  this.state.answeredQuections, \n                isShowResult: this.state.isShowResult, \n\n                showResult: (answers) => {   \n                    this.setState({ \n                        isShowResult: true,\n                        answeredQuections: answers\n                    })  \n                }\n            } }>\n                {this.props.children}\n            </QuizContext.Provider>\n        )\n    }\n\n}\n\nexport default QuizProvider; \n","import React from 'react' \nimport { Card, Button } from 'react-bootstrap';\nimport { NavLink, useNavigate } from 'react-router-dom'\n\n\nconst Error404 = () => {\n\n    const navigate = useNavigate()\n    return (\n        <Card className=\"text-center\">\n            <Card.Body className=\"p-5\">\n                <div className=\"display-5 text-300 fs-error\">404</div>\n                <p className=\"lead mt-4 text-800 font-sans-serif fw-semi-bold\">\n                    Страница не существует\n                </p>\n                <hr />\n                <Button\n                    size='sm'\n                    variant='primary'\n                    onClick={() => navigate(-1)}\n                >\n                    Назад\n                </Button>\n                {/* <NavLink className=\"btn btn-primary btn-sm ms-3\" href=\"/\">\n                    На главную\n                </NavLink> */}\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default Error404","import React from 'react'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\n\nconst Main = () => {\n  return (\n    <Container>\n        <Row>\n            <Col>\n                <NavLink to='/react_quiz/theory/orf'>Теория орфография</NavLink>\n                <NavLink to='/react_quiz/theory/punk'>Теория пунктуация</NavLink>\n                <NavLink to='/react_quiz/test/orf'>Тест орфография</NavLink>\n                <NavLink to='/react_quiz/test/punk'>Тест пунктуация</NavLink>\n            </Col>\n        </Row>\n    </Container>\n  )\n}\n\nexport default Main","import React from 'react'\n\nconst OrfBase = () => {\n  return (\n    <div>OrfBase</div>\n  )\n}\n\nexport default OrfBase","import React from 'react'\n\nconst PunkBase = () => {\n  return (\n    <div>PunkBase</div>\n  )\n}\n\nexport default PunkBase","import React from 'react'\nimport { Button, Col, Container, Row } from 'react-bootstrap'\nimport { NavLink, useParams } from 'react-router-dom'\nimport OrfBase from './OrfBase'\nimport PunkBase from './PunkBase'\n\nconst Theory = () => {\n\n    const { type } = useParams()\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <h3>Теория по {type === 'orf' ? 'орфографии' : 'пунктуации'}</h3>\n                    {type === 'orf' ? <OrfBase /> : <PunkBase />}\n\n                    <Button as={NavLink} to={`/react_quiz/test/${type}`} >\n                        Начать тест\n                    </Button>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Theory","import React, { Component } from 'react'\nimport { Card } from 'react-bootstrap'\n\nclass QuizCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeQuection: 0,\n            quections: this.props.quections,\n            userAnswer: null,\n            answeredQuections: [],\n            answerCounter: 0\n        }\n        this.addAnswer = this.addAnswer.bind(this)\n        this.skipAnswer = this.skipAnswer.bind(this)\n        this.renderProgress = this.renderProgress.bind(this)\n        this.isButtonDisabled = this.isButtonDisabled.bind(this)\n    }\n\n    changeAnswer(id) {\n        this.setState({\n            userAnswer: id\n        })\n    }\n    skipAnswer() {\n        let id = this.state.activeQuection\n        // если пользователь пытается скипнуть последний вопрос, то создать массив скипнутых вопросов и перейти на первый\n        if (id === this.state.quections.length - 1) {\n            let skiped = []\n            this.props.quections.map(item => {\n                if (item.isAnswered === false) {\n                    skiped.push(item)\n                }\n                return true\n            })\n            this.setState({\n                activeQuection: skiped[0].id\n            })\n        }\n        else {\n            // если пользователь скипает не последний вопрос, то инкремент активного вопроса\n            let newActiveNumber = this.state.activeQuection + 1\n\n            //если новый активный вопрос уже отвечен инкрементить до тех  пор пока не найдется неотвеченный вопрос \n            if (this.props.quections[newActiveNumber].isAnswered === true) {\n                while (this.props.quections[newActiveNumber].isAnswered === true) {\n                    newActiveNumber++\n                }\n            }\n            this.setState({\n                activeQuection: newActiveNumber\n            })\n        }\n        this.setState({\n            userAnswer: null\n        })\n\n    }\n    addAnswer() {\n        let activeId = this.state.activeQuection\n        //newActiveNumber - переменная в которой считается новое значение активного вопроса \n        //newAnswerCounter - переменная в которой считается новое значение количества ответов\n        let newActiveNumber = this.state.activeQuection\n        let newAnswerCounter = this.state.answerCounter + 1\n\n        // проверка: если активный вопрос является последним для пересчета newActiveNumber\n        // если true: создать массив неотвеченных вопросов и сделать активным первый из неотвеченных\n        if (activeId === this.props.quections.length - 1) {\n            let skiped = []\n\n            this.props.quections.map(item => {\n                if (item.isAnswered === false) {\n                    skiped.push(item)\n                }\n                return true\n            })\n\n            // без таймаута не успевает посчитаться skiped[0].id\n            // не знаю как исправить \n            setTimeout(() => {\n                this.setState({\n                    activeQuection: skiped[0].id\n                })\n            }, 100);\n\n\n        } else {\n\n            // newActiveNumber всегда плюсуется \n\n            // if(this.state.answerCounter < this.props.quections.length - 1) {\n            newActiveNumber++\n            //провека: если newActiveNumber после инкремента уже отвеченный или newActiveNumber больше количества вопросов\n            if (this.props.quections[newActiveNumber].isAnswered === true && this.state.answerCounter < this.props.quections.length - 1) {\n\n                //\n                while (this.state.quections[newActiveNumber].isAnswered === true) {\n                    if (newActiveNumber < this.props.quections.length) newActiveNumber++\n                    else newActiveNumber--\n                }\n            }\n            // }\n\n        }\n\n\n        // блок ниже создает массив на основе вопросов, ставит ответ пользователя и меняет статус isAnswered \n\n        let newAnsweredArray = this.state.answeredQuections.slice()\n        let answer = this.state.quections[activeId]\n        // let answer = Object.assign({}, this.state.quections[activeId])\n\n\n        //блок бесполезен так как в двух строчках ниже меняется значение не только нового массива но и значение props из контекста \n        // я не хотел бы менять значен пропсов, но оно меняется , хз \n        answer.isAnswered = true\n        answer.userAnswer = this.state.userAnswer\n\n        newAnsweredArray.push(answer)\n        console.log(answer)\n        console.log(newAnsweredArray)\n\n        this.setState({\n            activeQuection: newActiveNumber,\n            answerCounter: newAnswerCounter,\n            userAnswer: null,\n            answeredQuections: newAnsweredArray,\n        })\n\n\n        //если есть ответы на все вопросы - показать результаты\n        // таймаут тк не успевает записаться this.state.answeredQuections\n        if (this.state.answerCounter === this.props.quections.length - 1) {\n            setTimeout(() => {\n                this.props.showResult(this.state.answeredQuections)\n            }, 100);\n        }\n\n    }\n\n    renderProgress() {\n        return (\n            this.state.answerCounter < this.props.quections.length &&\n\n            <div className='progress-quiz'>\n                {\n                    this.state.quections.map(quection => (\n                        <div\n                            className={` progress-quiz-item \n                                            ${(quection.id === this.state.activeQuection) ? 'active' : ''} \n                                            ${quection.isAnswered === true ? 'answered' : ''} \n                                            ${quection.userAnswer === quection.correctAnswer ? 'right' : 'wrong'}\n                                        ` }\n                            key={quection.id}\n                        ></div>\n                    ))\n                }\n\n            </div>\n        )\n    }\n    renderOptions() {\n        return (\n            this.props.quections[this.state.activeQuection].options.map((option, index) => (\n                <div className=\"option_item\"\n                    key={index}\n                    onClick={() => { this.changeAnswer(index) }}\n                >\n\n                    <i className={` ${index === this.state.userAnswer ? 'active' : ''} `}></i>\n                    <p>\n                        {option}\n                    </p>\n                </div>\n            ))\n        )\n    }\n    isButtonDisabled() {\n        return (this.state.userAnswer == null) ? true : false\n    }\n\n    render() {\n        let activeQuection = this.state.activeQuection,\n            quectionsLength = this.props.quections.length,\n            answerCounter = this.state.answerCounter,\n            quectionText = this.props.quections[this.state.activeQuection].text\n\n        return (\n            <Card className=\"bg-dark text-light\">\n                {\n                    answerCounter < quectionsLength &&\n                    <Card.Header className='border-0'>\n                        <div className='d-flex justify-content-between  align-items-center'>\n                            <h6 className='mb-0'>\n                                <b>Quection №{activeQuection + 1} </b>\n                            </h6>\n                            {\n                                answerCounter < quectionsLength - 1 &&\n                                <span className='btn-skip' onClick={this.skipAnswer} >\n                                    Skip\n                                </span>\n                            }\n                        </div>\n                    </Card.Header>\n                }\n                {\n                    this.renderProgress()\n                }\n                {\n                    answerCounter < quectionsLength &&\n\n                    <Card.Body>\n\n                        <h4>\n                            {quectionText}\n                        </h4>\n\n                        {this.renderOptions()}\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-answer\"\n                            disabled={this.isButtonDisabled()}\n                            onClick={this.addAnswer}\n                        >\n                            Answer\n                        </button>\n\n                    </Card.Body>\n                }\n\n\n            </Card>\n        )\n    }\n}\n\nexport default QuizCard\n","import React, { Component } from 'react'\nimport {Card } from 'react-bootstrap'\n\nexport default class QuizResult extends Component {\n    constructor(props) {\n        super(props) \n        \n        this.renderAnswers = this.renderAnswers.bind(this)\n        this.renderOptions = this.renderOptions.bind(this)\n    }\n   \n    computedAnswers() { \n        let counter = 0\n        this.props.result.map( item => {\n            if(item.correctAnswer === item.userAnswer) counter++\n            return 0\n        })\n        return counter\n    }\n    renderAnswers() {\n        return(\n            this.props.result.map( item => (\n                <Card.Body className={ `card-body-answer ${item.userAnswer === item.correctAnswer ? 'right' : 'wrong'}`} key={item.id} >\n                    <small className='text-muted'>\n                        Quection № { item.id + 1}\n                    </small>\n                    <h5>\n                        { item.text}\n                    </h5>\n                    { \n                        this.renderOptions(item) \n                    }\n                </Card.Body>\n            ))\n        )\n    }\n\n    renderOptions(item) { \n        return(\n            item.options.map( (option, index) => (\n                <div className=\"custom-control pl-0 custom-radio my-3\" key={index}> \n                    <label className={` \n                                        custom-control-label custom-control-label-answer \n                                        ${item.userAnswer === index ? 'color' : ''}\n                                        ${item.userAnswer === item.correctAnswer ? 'right' : 'wrong'}\n                                    `} >\n                        { option }\n                    </label>\n                    { \n                        item.userAnswer === index && <span> - Your answer</span>\n                    }\n                    {\n                        item.userAnswer !== item.correctAnswer && item.correctAnswer === index && <span className='text-muted'> - Correct answer</span>\n                    }\n                </div>\n            )) \n        )\n    }\n    render() {\n        let yourResult = this.computedAnswers() +'/'+ this.props.result.length\n        return (\n            <Card className=\"bg-dark text-light mt-3 mb-3\">\n                <Card.Header> \n                            <div className='d-flex justify-content-between align-items-center'>\n                                <h5>\n                                    Сongratulations! <br></br>\n                                    <small>Quiz is Over</small>\n                                </h5> \n\n                                <button className='btn btn-answer'>\n                                    Try again!(disabled)\n                                </button>\n                            </div> \n\n                            <h4>\n                                Your Result ( {yourResult} )\n                            </h4>\n                </Card.Header>\n                {\n                    this.renderAnswers()\n                } \n            </Card>\n        )\n    }\n}\n\n ","import React, { useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport QuizContext from '../../context/QuizContext'\nimport QuizCard from './QuizCard'\nimport QuizResult from './QuizResult'\n\n\nconst ConsumerContainer = () => {\n\n    const { type } = useParams()\n\n    const { isShowResult, quiz_orf, quiz_punk, showResult, answeredQuections } = useContext(QuizContext)\n\n    return (\n        <>\n            {\n                !isShowResult &&\n                <QuizCard\n                    quections={type === 'orf' ?  quiz_orf : quiz_punk }\n                    showResult={showResult}\n                />\n            }\n            <div>\n                {\n                    isShowResult &&\n                    <QuizResult\n                        result={answeredQuections}\n                    />\n                }\n            </div>\n        </>\n    )\n}\n\nexport default ConsumerContainer","import React from 'react'\n \nimport ConsumerContainer from './ConsumerContainer'\n\nimport { Container, Row, Col } from 'react-bootstrap' \n\nconst QuizContainer = () => {\n\n    return (\n        <Container>\n            <Row className={'justify-content-center'}>\n                <Col md='6'> \n                    <ConsumerContainer />\n                </Col>\n            </Row>\n        </Container>\n    )\n}\nexport default QuizContainer","import React from 'react';\nimport QuizProvider from './context/QuizProvider' \n\nimport { Navigate, Route, Router, Routes } from 'react-router-dom';\n\nimport Error404 from './components/404/Error404';\nimport Main from './components/Main';\nimport Theory from './components/theory/Theory';\nimport QuizContainer from './components/test/QuizContainer';\n\nfunction App() {\n  return (\n    <QuizProvider>\n      <Routes> \n          <Route path=\"/react_quiz/\" element={<Main />} />\n          <Route path=\"/react_quiz/theory/:type\" element={<Theory />} /> \n          <Route path=\"/react_quiz/test/:type\" element={<QuizContainer />} />\n          <Route path=\"/*\" element={< Error404 />} /> \n      </Routes>\n      {/* <QuizContainer /> */}\n    </QuizProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/style.css'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={'/'}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}