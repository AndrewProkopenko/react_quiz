{"version":3,"sources":["context/QuizContext.js","context/QuizProvider.js","QuizCard.js","QuizResult.js","QuizContainer.js","App.js","serviceWorker.js","index.js"],"names":["QuizContext","React","createContext","QuizProvider","state","quiz","id","text","options","correctAnswer","isAnswered","userAnswer","activeQuection","answeredQuections","isShowResult","Provider","value","this","showResult","answers","setState","props","children","Component","QuizCard","quections","answerCounter","addAnswer","bind","length","skiped","map","item","push","newActiveNumber","activeId","newAnswerCounter","setTimeout","console","log","newAnsweredArray","slice","answer","Card","className","CardHeader","onClick","skipAnswer","quection","key","CardBody","option","index","changeAnswer","htmlFor","type","disabled","QuizResult","counter","result","computedAnswers","QuizContainer","Container","Row","Col","md","Consumer","context","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c8cf7fb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst QuizContext = React.createContext();\r\n\r\nexport default QuizContext; ","import React, { Component } from 'react'\r\n\r\nimport QuizContext from './QuizContext'\r\n\r\nclass QuizProvider extends Component { \r\n\r\n    state = {  \r\n        quiz: [ \r\n            {\r\n                id: 0,\r\n                text: 'typeof(NaN) ?', \r\n                options: ['null', 'number','undefined', 'error'], \r\n                correctAnswer: 1 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            }, \r\n            {\r\n                id: 1,\r\n                text: '!!(0.5 + 0.1 == 0.6 )', \r\n                options: ['false', 'true', 'null','undefined'], \r\n                correctAnswer: 1 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 2,\r\n                text: '!!(0.2 + 0.1 == 0.3 )', \r\n                options: ['false', 'true', 'null','undefined'], \r\n                correctAnswer: 0 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 3,\r\n                text: '9 + \"1\" ', \r\n                options: ['\"91\"', '91', 'NaN', '9 \"1\" '], \r\n                correctAnswer: 0 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 4,\r\n                text: '91 - \"1\" ', \r\n                options: ['91 - \"1\" ', '911', '90', '99 '], \r\n                correctAnswer: 2 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 5,\r\n                text: 'true + true + true = ?', \r\n                options: ['truetruetrue\" ', 'undefined', 'true', '3 '], \r\n                correctAnswer: 3 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 6,\r\n                text: '!!([]==0)', \r\n                options: ['false', 'true', 'null','undefined'], \r\n                correctAnswer: 1,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 7,\r\n                text: '[] + []', \r\n                options: ['<empty string>', '\"[object Object]\"', '[ ]', 'typeError'], \r\n                correctAnswer: 0,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 8,\r\n                text: '[] + {}', \r\n                options: ['<empty string>', '\"[object Object]\"', '[ ]', 'typeError'], \r\n                correctAnswer: 1,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            }, \r\n        ],\r\n        activeQuection: 0, \r\n        answeredQuections: [], \r\n        isShowResult: false \r\n\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <QuizContext.Provider value={ { \r\n                quiz: this.state.quiz,\r\n                activeQuection: this.state.activeQuection, \r\n                answeredQuections: this.state.quiz, \r\n                isShowResult: this.state.isShowResult, \r\n\r\n                showResult: (answers) => {   \r\n                    this.setState({ \r\n                        isShowResult: true\r\n                    })  \r\n                }\r\n            } }>\r\n                {this.props.children}\r\n            </QuizContext.Provider>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default QuizProvider; \r\n","import React, {Component} from 'react' \r\nimport {Card, CardHeader, CardBody} from 'reactstrap'\r\n\r\nclass QuizCard extends Component { \r\n    constructor(props) { \r\n        super(props) \r\n        this.state = { \r\n            activeQuection: 0,\r\n            quections: this.props.quections, \r\n            userAnswer: null,  \r\n            answeredQuections: [],\r\n            answerCounter: 0\r\n        } \r\n        this.addAnswer = this.addAnswer.bind(this)\r\n    }\r\n   \r\n    changeAnswer(id) { \r\n        this.setState( { \r\n            userAnswer : id\r\n        })  \r\n    }\r\n    skipAnswer(id) { \r\n          \r\n        if(id === this.state.quections.length - 1 ) {  \r\n            let skiped = []\r\n            this.props.quections.map( item => {\r\n                if(item.isAnswered === false) { \r\n                    skiped.push(item)\r\n                }\r\n                return true\r\n            })\r\n            this.setState({ \r\n                activeQuection: skiped[0].id\r\n            })  \r\n        }\r\n        else {  \r\n            let newActiveNumber = this.state.activeQuection + 1  \r\n            if(this.props.quections[newActiveNumber].isAnswered === true ) {\r\n                while(this.props.quections[newActiveNumber].isAnswered === true ) { \r\n                    newActiveNumber++\r\n                }\r\n            }\r\n            this.setState({ \r\n                activeQuection: newActiveNumber\r\n            })\r\n        }\r\n       \r\n    }\r\n    addAnswer(activeId) {    \r\n        let newActiveNumber = this.state.activeQuection \r\n        let newAnswerCounter = this.state.answerCounter + 1\r\n        if( activeId === this.props.quections.length - 1 ) {  \r\n            let skiped = []\r\n             \r\n            this.props.quections.map( item => {\r\n                if(item.isAnswered === false) { \r\n                    skiped.push(item)\r\n                }\r\n                return true\r\n            })    \r\n            setTimeout(() => {\r\n                this.setState({ \r\n                    activeQuection: skiped[0].id\r\n                }) \r\n            }, 200); \r\n\r\n        } else { \r\n            if(this.state.answerCounter < this.props.quections.length - 1) {\r\n                newActiveNumber++\r\n                if(this.props.quections[newActiveNumber].isAnswered === true ) {\r\n                    while(this.props.quections[newActiveNumber].isAnswered === true ) { \r\n                        if(newActiveNumber < this.props.quections.length) newActiveNumber++\r\n                        else newActiveNumber--\r\n                    }\r\n                }\r\n            }\r\n            \r\n        } \r\n        console.log(newActiveNumber)\r\n        \r\n        let newAnsweredArray = this.state.answeredQuections.slice()\r\n        let answer = this.props.quections[activeId]\r\n\r\n        answer.isAnswered = true\r\n        answer.userAnswer = this.state.userAnswer\r\n\r\n        newAnsweredArray.push(answer)\r\n \r\n        this.setState({ \r\n            activeQuection: newActiveNumber, \r\n            answerCounter: newAnswerCounter, \r\n            userAnswer: null\r\n        })  \r\n          \r\n        \r\n        if(this.state.answerCounter === this.props.quections.length - 1) { \r\n            this.props.showResult(this.props.quections)\r\n        } \r\n \r\n    } \r\n    render() {  \r\n        return(\r\n            <Card className=\"bg-dark text-light\"> \r\n                    {\r\n                        this.state.answerCounter < this.props.quections.length && \r\n                        <CardHeader className='border-0'>\r\n                            {\r\n                                this.state.activeQuection >= 0 && <div className='d-flex justify-content-between  align-items-center'>\r\n                                    <h6 className='mb-0'>\r\n                                        <b>Quection №{ this.state.activeQuection + 1 } </b>\r\n                                    </h6>\r\n                                    <span className='btn-skip' onClick={()=>(  this.skipAnswer(this.state.activeQuection) )} >\r\n                                        Skip\r\n                                    </span> \r\n                                </div>\r\n                            }\r\n                        \r\n                        </CardHeader>\r\n                    }\r\n                    {\r\n                        this.state.answerCounter < this.props.quections.length && \r\n\r\n                        <div className='progress-quiz'>\r\n                            {\r\n                                this.props.quections.map( quection => (\r\n                                    <div \r\n                                        className = { ` progress-quiz-item \r\n                                                        ${(quection.id === this.state.activeQuection) ? 'active' : ''} \r\n                                                        ${quection.isAnswered === true ? 'answered' : ''}\r\n                                                        ${quection.userAnswer === quection.correctAnswer ? 'right' : 'wrong'}\r\n                                                    ` }\r\n                                        key={quection.id}\r\n                                    ></div>\r\n                                ) )\r\n                            }\r\n                        \r\n                        </div>\r\n                    }\r\n                    { \r\n                        this.state.answerCounter < this.props.quections.length &&  \r\n                        \r\n                        <CardBody>\r\n                        \r\n                            <h5>\r\n                                { this.props.quections[this.state.activeQuection].text}\r\n                            </h5>\r\n\r\n                            {\r\n                                this.props.quections[this.state.activeQuection].options.map( (option, index) => (\r\n                                    <div className=\"option_item\" \r\n                                         key={index}\r\n                                         onClick={()=>{this.changeAnswer(index)}}     \r\n                                    >\r\n                                        \r\n                                        <i className={` ${ index === this.state.userAnswer ? 'active' : ''} `}></i>\r\n                                        <p className=\"custom-control-label2\" htmlFor={`customRadio${index}`} >\r\n                                            { option }\r\n                                        </p>\r\n                                    </div>\r\n                                ))\r\n                            } \r\n\r\n                            \r\n                            <button \r\n                                type=\"button\" \r\n                                className=\"btn btn-answer\" \r\n                                disabled={(this.state.userAnswer == null) ? true : false}\r\n                                onClick={ () => { this.addAnswer(this.state.activeQuection) } }\r\n                            >\r\n                                Answer\r\n                            </button>\r\n                            \r\n                        </CardBody>\r\n                    }\r\n                    {\r\n                        this.state.answerCounter >= this.props.quections.length && \r\n                        <CardBody>\r\n                            <h5>\r\n                                Сongratulations! <br></br>\r\n                                <small>Quiz is Over</small>\r\n                            </h5>\r\n                        </CardBody>\r\n                    }\r\n                   \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizCard\r\n","import React, { Component } from 'react'\r\nimport {Card, CardHeader, CardBody} from 'reactstrap'\r\n\r\nexport default class QuizResult extends Component {\r\n   \r\n    computedAnswers() { \r\n        let counter = 0\r\n        this.props.result.map( item => {\r\n            if(item.correctAnswer === item.userAnswer) counter++\r\n            return 0\r\n        })\r\n        return counter\r\n    }\r\n    render() {\r\n        return (\r\n            <Card className=\"bg-dark text-light mt-5 mb-3\">\r\n                <CardHeader>\r\n                    Your Results ( {this.computedAnswers()}/{this.props.result.length} )\r\n                </CardHeader>\r\n                {\r\n                    this.props.result.map( item => (\r\n                        <CardBody className={ `card-body-answer ${item.userAnswer === item.correctAnswer ? 'right' : 'wrong'}`} >\r\n                            <h5>\r\n                                { item.text}\r\n                            </h5>\r\n                            { \r\n                                item.options.map( (option, index) => (\r\n                                    <div className=\"custom-control pl-0 custom-radio my-3\" key={index}> \r\n                                        <label className={` \r\n                                                            custom-control-label custom-control-label-answer \r\n                                                            ${item.userAnswer === index ? 'color' : ''}\r\n                                                            ${item.userAnswer === item.correctAnswer ? 'right' : 'wrong'}\r\n                                                        `} >\r\n                                            { option }\r\n                                        </label>\r\n                                        { \r\n                                            item.userAnswer === index && <span> - Your answer</span>\r\n                                        }\r\n                                        {\r\n                                            item.userAnswer !== item.correctAnswer && item.correctAnswer === index &&   <span className='text-muted'> - Correct answer</span>\r\n                                        }\r\n                                    </div>\r\n                                )) \r\n                            }\r\n                        </CardBody>\r\n                    ))\r\n                }\r\n                \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n ","import React from 'react'\r\nimport QuizCard from './QuizCard'\r\nimport QuizResult from './QuizResult'\r\nimport QuizContext from './context/QuizContext'\r\n// import Notification from './Notification/Notification'\r\n\r\nimport {Container, Row, Col} from 'reactstrap'\r\n\r\nconst QuizContainer = () => { \r\n    // const [visible, setVisible] = React.useState(false); \r\n    // const setNotification = function() {  \r\n    //     setVisible(true) \r\n    // }\r\n    return( \r\n        <Container>\r\n           <Row className={'justify-content-center'}>\r\n               <Col md='6'>  \r\n                   {\r\n                        // visible && <Notification color={'dark'} visible={visible} /> \r\n                   }\r\n                   <QuizContext.Consumer>\r\n                       {\r\n                           context => (\r\n                                <div>\r\n                                    <QuizCard \r\n                                        quections={context.quiz} \r\n                                        showResult = { context.showResult}\r\n                                    /> \r\n                                    <div>\r\n                                        {\r\n                                            context.isShowResult && \r\n                                            <QuizResult \r\n                                                result={context.quiz}\r\n                                            />  \r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                           ) \r\n                       } \r\n                       \r\n                   </QuizContext.Consumer>\r\n                   \r\n               </Col>\r\n           </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default QuizContainer","import React from 'react'; \nimport QuizProvider from './context/QuizProvider'\nimport QuizContainer from './QuizContainer' \n\nfunction App() {\n  return (\n    <QuizProvider> \n       <QuizContainer/>\n    </QuizProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/style.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}