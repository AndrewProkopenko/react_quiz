{"version":3,"sources":["context/QuizContext.js","context/QuizProvider.js","QuizCard.js","QuizResult.js","ConsumerContainer.js","QuizContainer.js","App.js","serviceWorker.js","index.js"],"names":["QuizContext","React","createContext","QuizProvider","state","quiz","id","text","options","correctAnswer","isAnswered","userAnswer","activeQuection","answeredQuections","isShowResult","Provider","value","this","showResult","answers","setState","props","children","Component","QuizCard","quections","answerCounter","addAnswer","bind","skipAnswer","renderProgress","isButtonDisabled","length","skiped","map","item","push","newActiveNumber","activeId","newAnswerCounter","setTimeout","newAnsweredArray","slice","answer","console","log","className","quection","key","option","index","onClick","changeAnswer","quectionsLength","quectionText","Card","CardHeader","CardBody","renderOptions","type","disabled","QuizResult","renderAnswers","counter","result","yourResult","computedAnswers","ConsumerContainer","context","QuizContainer","Container","Row","Col","md","Consumer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68b8f05e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst QuizContext = React.createContext();\r\n\r\nexport default QuizContext; ","import React, { Component } from 'react'\r\n\r\nimport QuizContext from './QuizContext'\r\n\r\nclass QuizProvider extends Component { \r\n\r\n    state = {  \r\n        quiz: [ \r\n            {\r\n                id: 0,\r\n                text: 'typeof(NaN) ?', \r\n                options: ['null', 'number','undefined', 'error'], \r\n                correctAnswer: 1 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            }, \r\n            {\r\n                id: 1,\r\n                text: '!!(0.5 + 0.1 == 0.6 )', \r\n                options: ['false', 'true', 'null','undefined'], \r\n                correctAnswer: 1 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 2,\r\n                text: '!!(0.2 + 0.1 == 0.3 )', \r\n                options: ['false', 'true', 'null','undefined'], \r\n                correctAnswer: 0 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 3,\r\n                text: '9 + \"1\" ', \r\n                options: ['\"91\"', '91', 'NaN', '9 \"1\" '], \r\n                correctAnswer: 0 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 4,\r\n                text: '91 - \"1\" ', \r\n                options: ['91 - \"1\" ', '911', '90', '99 '], \r\n                correctAnswer: 2 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 5,\r\n                text: 'true + true + true = ?', \r\n                options: ['truetruetrue\" ', 'undefined', 'true', '3 '], \r\n                correctAnswer: 3 ,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 6,\r\n                text: '!!([]==0)', \r\n                options: ['false', 'true', 'null','undefined'], \r\n                correctAnswer: 1,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 7,\r\n                text: '[] + []', \r\n                options: ['<empty string>', '\"[object Object]\"', '[ ]', 'typeError'], \r\n                correctAnswer: 0,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            },\r\n            {\r\n                id: 8,\r\n                text: '[] + {}', \r\n                options: ['<empty string>', '\"[object Object]\"', '[ ]', 'typeError'], \r\n                correctAnswer: 1,\r\n                isAnswered: false, \r\n                userAnswer: null\r\n            }, \r\n        ],\r\n        activeQuection: 0, \r\n        answeredQuections: [], \r\n        isShowResult: false \r\n\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <QuizContext.Provider value={ { \r\n                quiz: this.state.quiz,\r\n                activeQuection: this.state.activeQuection, \r\n                answeredQuections:  this.state.answeredQuections, \r\n                isShowResult: this.state.isShowResult, \r\n\r\n                showResult: (answers) => {   \r\n                    this.setState({ \r\n                        isShowResult: true,\r\n                        answeredQuections: answers\r\n                    })  \r\n                }\r\n            } }>\r\n                {this.props.children}\r\n            </QuizContext.Provider>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default QuizProvider; \r\n","import React, {Component} from 'react' \r\nimport {Card, CardHeader, CardBody} from 'reactstrap'\r\n\r\nclass QuizCard extends Component { \r\n    constructor(props) { \r\n        super(props) \r\n        this.state = { \r\n            activeQuection: 0,\r\n            quections: this.props.quections, \r\n            userAnswer: null,  \r\n            answeredQuections: [],\r\n            answerCounter: 0\r\n        } \r\n        this.addAnswer = this.addAnswer.bind(this)\r\n        this.skipAnswer = this.skipAnswer.bind(this)\r\n        this.renderProgress = this.renderProgress.bind(this)\r\n        this.isButtonDisabled = this.isButtonDisabled.bind(this)\r\n    }\r\n   \r\n    changeAnswer(id) { \r\n        this.setState( { \r\n            userAnswer : id\r\n        })  \r\n    }\r\n    skipAnswer() { \r\n        let id = this.state.activeQuection\r\n        // если пользователь пытается скипнуть последний вопрос, то создать массив скипнутых вопросов и перейти на первый\r\n        if(id === this.state.quections.length - 1 ) {  \r\n            let skiped = []\r\n            this.props.quections.map( item => {\r\n                if(item.isAnswered === false) { \r\n                    skiped.push(item)\r\n                }\r\n                return true\r\n            })\r\n            this.setState({ \r\n                activeQuection: skiped[0].id\r\n            })  \r\n        }\r\n        else {  \r\n            // если пользователь скипает не последний вопрос, то инкремент активного вопроса\r\n            let newActiveNumber = this.state.activeQuection + 1  \r\n\r\n            //если новый активный вопрос уже отвечен инкрементить до тех  пор пока не найдется неотвеченный вопрос \r\n            if(this.props.quections[newActiveNumber].isAnswered === true ) {\r\n                while(this.props.quections[newActiveNumber].isAnswered === true ) { \r\n                    newActiveNumber++\r\n                }\r\n            }\r\n            this.setState({ \r\n                activeQuection: newActiveNumber\r\n            })\r\n        }\r\n        this.setState( { \r\n            userAnswer : null\r\n        })  \r\n       \r\n    }\r\n    addAnswer() {     \r\n        let activeId = this.state.activeQuection\r\n        //newActiveNumber - переменная в которой считается новое значение активного вопроса \r\n        //newAnswerCounter - переменная в которой считается новое значение количества ответов\r\n        let newActiveNumber = this.state.activeQuection \r\n        let newAnswerCounter = this.state.answerCounter + 1\r\n        \r\n        // проверка: если активный вопрос является последним для пересчета newActiveNumber\r\n        // если true: создать массив неотвеченных вопросов и сделать активным первый из неотвеченных\r\n        if( activeId === this.props.quections.length - 1 ) {  \r\n            let skiped = []\r\n             \r\n            this.props.quections.map( item => {\r\n                if(item.isAnswered === false) { \r\n                    skiped.push(item)\r\n                }\r\n                return true\r\n            })    \r\n             \r\n            // без таймаута не успевает посчитаться skiped[0].id\r\n            // не знаю как исправить \r\n            setTimeout(() => {\r\n                this.setState({ \r\n                    activeQuection: skiped[0].id\r\n                }) \r\n            }, 100);\r\n           \r\n\r\n        } else { \r\n\r\n            // newActiveNumber всегда плюсуется \r\n            \r\n            // if(this.state.answerCounter < this.props.quections.length - 1) {\r\n                newActiveNumber++\r\n                //провека: если newActiveNumber после инкремента уже отвеченный или newActiveNumber больше количества вопросов\r\n                if(this.props.quections[newActiveNumber].isAnswered === true && this.state.answerCounter < this.props.quections.length - 1 ) {\r\n\r\n                    //\r\n                    while(this.state.quections[newActiveNumber].isAnswered === true ) { \r\n                        if(newActiveNumber < this.props.quections.length) newActiveNumber++\r\n                        else newActiveNumber--\r\n                    }\r\n                }\r\n            // }\r\n            \r\n        }  \r\n        \r\n\r\n        // блок ниже создает массив на основе вопросов, ставит ответ пользователя и меняет статус isAnswered \r\n        \r\n        let newAnsweredArray = this.state.answeredQuections.slice() \r\n        let answer = this.state.quections[activeId]\r\n        // let answer = Object.assign({}, this.state.quections[activeId])\r\n         \r\n \r\n        //блок бесполезен так как в двух строчках ниже меняется значение не только нового массива но и значение props из контекста \r\n        // я не хотел бы менять значен пропсов, но оно меняется , хз \r\n        answer.isAnswered = true\r\n        answer.userAnswer = this.state.userAnswer \r\n\r\n        newAnsweredArray.push(answer)\r\n        console.log(answer)\r\n        console.log(newAnsweredArray)\r\n \r\n        this.setState({ \r\n            activeQuection: newActiveNumber, \r\n            answerCounter: newAnswerCounter, \r\n            userAnswer: null, \r\n            answeredQuections: newAnsweredArray, \r\n        })  \r\n         \r\n          \r\n        //если есть ответы на все вопросы - показать результаты\r\n        // таймаут тк не успевает записаться this.state.answeredQuections\r\n        if(this.state.answerCounter === this.props.quections.length - 1) { \r\n            setTimeout(() => {\r\n                 this.props.showResult(this.state.answeredQuections)\r\n            }, 100);\r\n        } \r\n \r\n    } \r\n\r\n    renderProgress() { \r\n        return(\r\n            this.state.answerCounter < this.props.quections.length && \r\n\r\n            <div className='progress-quiz'>\r\n                {\r\n                    this.state.quections.map( quection => ( \r\n                        <div \r\n                            className = { ` progress-quiz-item \r\n                                            ${(quection.id === this.state.activeQuection) ? 'active' : ''} \r\n                                            ${quection.isAnswered === true ? 'answered' : ''} \r\n                                            ${quection.userAnswer === quection.correctAnswer ? 'right' : 'wrong'}\r\n                                        ` }\r\n                            key={quection.id}\r\n                        ></div>\r\n                    ) )\r\n                }\r\n            \r\n            </div>\r\n        )\r\n    }\r\n    renderOptions() { \r\n        return(\r\n            this.props.quections[this.state.activeQuection].options.map( (option, index) => (\r\n                <div className=\"option_item\" \r\n                     key={index}\r\n                     onClick={ () => {this.changeAnswer(index)} }     \r\n                >\r\n                    \r\n                    <i className={` ${ index === this.state.userAnswer ? 'active' : ''} `}></i>\r\n                    <p>\r\n                        { option }\r\n                    </p>\r\n                </div>\r\n            ))\r\n        )\r\n    }\r\n    isButtonDisabled() { \r\n       return (this.state.userAnswer == null) ? true : false\r\n    } \r\n    \r\n    render() {  \r\n        let activeQuection = this.state.activeQuection, \r\n            quectionsLength= this.props.quections.length, \r\n            answerCounter = this.state.answerCounter, \r\n            quectionText = this.props.quections[this.state.activeQuection].text\r\n\r\n        return(\r\n            <Card className=\"bg-dark text-light\"> \r\n                    {\r\n                        answerCounter < quectionsLength && \r\n                        <CardHeader className='border-0'> \r\n                                <div className='d-flex justify-content-between  align-items-center'>\r\n                                    <h6 className='mb-0'>\r\n                                        <b>Quection №{ activeQuection + 1 } </b>\r\n                                    </h6>\r\n                                    {   \r\n                                        answerCounter < quectionsLength - 1 && \r\n                                        <span className='btn-skip' onClick={this.skipAnswer} >\r\n                                            Skip\r\n                                        </span> \r\n                                    }\r\n                                </div> \r\n                        </CardHeader>\r\n                    }\r\n                    {\r\n                        this.renderProgress()\r\n                    }\r\n                    { \r\n                        answerCounter < quectionsLength &&  \r\n                        \r\n                        <CardBody>\r\n                        \r\n                            <h4>\r\n                                { quectionText }\r\n                            </h4>\r\n\r\n                            { this.renderOptions() }  \r\n\r\n                            <button \r\n                                type=\"button\" \r\n                                className=\"btn btn-answer\" \r\n                                disabled={ this.isButtonDisabled() } \r\n                                onClick={ this.addAnswer }\r\n                            >\r\n                                Answer\r\n                            </button>\r\n                            \r\n                        </CardBody>\r\n                    }\r\n                   \r\n                   \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizCard\r\n","import React, { Component } from 'react'\r\nimport {Card, CardHeader, CardBody} from 'reactstrap'\r\n\r\nexport default class QuizResult extends Component {\r\n    constructor(props) {\r\n        super(props) \r\n        \r\n        this.renderAnswers = this.renderAnswers.bind(this)\r\n        this.renderOptions = this.renderOptions.bind(this)\r\n    }\r\n   \r\n    computedAnswers() { \r\n        let counter = 0\r\n        this.props.result.map( item => {\r\n            if(item.correctAnswer === item.userAnswer) counter++\r\n            return 0\r\n        })\r\n        return counter\r\n    }\r\n    renderAnswers() {\r\n        return(\r\n            this.props.result.map( item => (\r\n                <CardBody className={ `card-body-answer ${item.userAnswer === item.correctAnswer ? 'right' : 'wrong'}`} key={item.id} >\r\n                    <small className='text-muted'>\r\n                        Quection № { item.id + 1}\r\n                    </small>\r\n                    <h5>\r\n                        { item.text}\r\n                    </h5>\r\n                    { \r\n                        this.renderOptions(item) \r\n                    }\r\n                </CardBody>\r\n            ))\r\n        )\r\n    }\r\n\r\n    renderOptions(item) { \r\n        return(\r\n            item.options.map( (option, index) => (\r\n                <div className=\"custom-control pl-0 custom-radio my-3\" key={index}> \r\n                    <label className={` \r\n                                        custom-control-label custom-control-label-answer \r\n                                        ${item.userAnswer === index ? 'color' : ''}\r\n                                        ${item.userAnswer === item.correctAnswer ? 'right' : 'wrong'}\r\n                                    `} >\r\n                        { option }\r\n                    </label>\r\n                    { \r\n                        item.userAnswer === index && <span> - Your answer</span>\r\n                    }\r\n                    {\r\n                        item.userAnswer !== item.correctAnswer && item.correctAnswer === index && <span className='text-muted'> - Correct answer</span>\r\n                    }\r\n                </div>\r\n            )) \r\n        )\r\n    }\r\n    render() {\r\n        let yourResult = this.computedAnswers() +'/'+ this.props.result.length\r\n        return (\r\n            <Card className=\"bg-dark text-light mt-3 mb-3\">\r\n                <CardHeader> \r\n                            <div className='d-flex justify-content-between align-items-center'>\r\n                                <h5>\r\n                                    Сongratulations! <br></br>\r\n                                    <small>Quiz is Over</small>\r\n                                </h5> \r\n\r\n                                <button className='btn btn-answer'>\r\n                                    Try again!(disabled)\r\n                                </button>\r\n                            </div> \r\n\r\n                            <h4>\r\n                                Your Result ( {yourResult} )\r\n                            </h4>\r\n                </CardHeader>\r\n                {\r\n                    this.renderAnswers()\r\n                } \r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n ","import React, { Component } from 'react'\r\nimport QuizCard from './QuizCard'\r\nimport QuizResult from './QuizResult'\r\n\r\nexport default class ConsumerContainer extends Component {\r\n    constructor(props) { \r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    !this.props.context.isShowResult &&\r\n                    <QuizCard \r\n                        quections={this.props.context.quiz} \r\n                        showResult = { this.props.context.showResult}\r\n                    /> \r\n                }\r\n                <div>\r\n                    {\r\n                        this.props.context.isShowResult && \r\n                        <QuizResult \r\n                            result={this.props.context.answeredQuections}\r\n                        />  \r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport QuizContext from './context/QuizContext'\r\nimport ConsumerContainer from './ConsumerContainer'\r\n// import Notification from './Notification/Notification'\r\n\r\nimport {Container, Row, Col} from 'reactstrap'\r\n\r\nconst QuizContainer = () => { \r\n    // const [visible, setVisible] = React.useState(false); \r\n    // const setNotification = function() {  \r\n    //     setVisible(true) \r\n    // }\r\n    return( \r\n        <Container>\r\n           <Row className={'justify-content-center'}>\r\n               <Col md='6'>  \r\n                   {\r\n                        // visible && <Notification color={'dark'} visible={visible} /> \r\n                   }\r\n                   <QuizContext.Consumer>  \r\n                        {\r\n                            context => (\r\n                                <ConsumerContainer context = {context} />  \r\n                            )\r\n                        }\r\n                   </QuizContext.Consumer>\r\n                   \r\n               </Col>\r\n           </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default QuizContainer","import React from 'react'; \nimport QuizProvider from './context/QuizProvider'\nimport QuizContainer from './QuizContainer' \n\nfunction App() {\n  return (\n    <QuizProvider> \n       <QuizContainer/>\n    </QuizProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/style.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}